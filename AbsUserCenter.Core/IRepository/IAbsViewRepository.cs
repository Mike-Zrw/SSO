

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using AbsUserCenter.Core.Model;
using System.Data;
using System.Data.SqlClient;
namespace AbsUserCenter.Core.IRepository
{   
	public partial interface IBPermissionRepository
    {
		int AddReturnId(BPermission model);

		int AddReturnId(BPermission model, SqlTransaction trans);

        int Add(BPermission model);

		int Add(BPermission model, SqlTransaction trans);

		int Modify(BPermission model);

		int Modify(BPermission model, SqlTransaction trans);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
		int Delete(string sqlcondi, params SqlParameter[] param);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
        int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param);

        int Delete(int id);

		int Delete(int id, SqlTransaction trans);

		/// <summary>
		/// 只读库读取数据
		/// </summary>
        BPermission Get(int id);
        /// <summary>
		/// 读写库读取数据
		/// </summary>
        BPermission GetRw(int id);
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
        //BPermission Get(int id, SqlTransaction trans);
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        List<BPermission> GetAll();
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        List<BPermission> GetAllRw();
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BPermission> GetAll(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BPermission> GetAllRw(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BPermission> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BPermission> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
        /// <summary>
		/// 带事物库读取数据
		/// </summary>
        List<BPermission> GetAll(SqlTransaction trans);
	    /// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		List<BPermission> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param);
    }
}
namespace AbsUserCenter.Core.IRepository
{   
	public partial interface IBRoleRepository
    {
		int AddReturnId(BRole model);

		int AddReturnId(BRole model, SqlTransaction trans);

        int Add(BRole model);

		int Add(BRole model, SqlTransaction trans);

		int Modify(BRole model);

		int Modify(BRole model, SqlTransaction trans);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
		int Delete(string sqlcondi, params SqlParameter[] param);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
        int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param);

        int Delete(int id);

		int Delete(int id, SqlTransaction trans);

		/// <summary>
		/// 只读库读取数据
		/// </summary>
        BRole Get(int id);
        /// <summary>
		/// 读写库读取数据
		/// </summary>
        BRole GetRw(int id);
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
        //BRole Get(int id, SqlTransaction trans);
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        List<BRole> GetAll();
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        List<BRole> GetAllRw();
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BRole> GetAll(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BRole> GetAllRw(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BRole> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BRole> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
        /// <summary>
		/// 带事物库读取数据
		/// </summary>
        List<BRole> GetAll(SqlTransaction trans);
	    /// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		List<BRole> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param);
    }
}
namespace AbsUserCenter.Core.IRepository
{   
	public partial interface IBSystemRepository
    {
		int AddReturnId(BSystem model);

		int AddReturnId(BSystem model, SqlTransaction trans);

        int Add(BSystem model);

		int Add(BSystem model, SqlTransaction trans);

		int Modify(BSystem model);

		int Modify(BSystem model, SqlTransaction trans);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
		int Delete(string sqlcondi, params SqlParameter[] param);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
        int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param);

        int Delete(int id);

		int Delete(int id, SqlTransaction trans);

		/// <summary>
		/// 只读库读取数据
		/// </summary>
        BSystem Get(int id);
        /// <summary>
		/// 读写库读取数据
		/// </summary>
        BSystem GetRw(int id);
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
        //BSystem Get(int id, SqlTransaction trans);
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        List<BSystem> GetAll();
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        List<BSystem> GetAllRw();
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BSystem> GetAll(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BSystem> GetAllRw(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BSystem> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BSystem> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
        /// <summary>
		/// 带事物库读取数据
		/// </summary>
        List<BSystem> GetAll(SqlTransaction trans);
	    /// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		List<BSystem> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param);
    }
}
namespace AbsUserCenter.Core.IRepository
{   
	public partial interface IBUserRepository
    {
		int AddReturnId(BUser model);

		int AddReturnId(BUser model, SqlTransaction trans);

        int Add(BUser model);

		int Add(BUser model, SqlTransaction trans);

		int Modify(BUser model);

		int Modify(BUser model, SqlTransaction trans);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
		int Delete(string sqlcondi, params SqlParameter[] param);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
        int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param);

        int Delete(int id);

		int Delete(int id, SqlTransaction trans);

		/// <summary>
		/// 只读库读取数据
		/// </summary>
        BUser Get(int id);
        /// <summary>
		/// 读写库读取数据
		/// </summary>
        BUser GetRw(int id);
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
        //BUser Get(int id, SqlTransaction trans);
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        List<BUser> GetAll();
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        List<BUser> GetAllRw();
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BUser> GetAll(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BUser> GetAllRw(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BUser> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<BUser> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
        /// <summary>
		/// 带事物库读取数据
		/// </summary>
        List<BUser> GetAll(SqlTransaction trans);
	    /// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		List<BUser> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param);

    }
}
namespace AbsUserCenter.Core.IRepository
{   
	public partial interface IHUserRepository
    {
		int AddReturnId(HUser model);

		int AddReturnId(HUser model, SqlTransaction trans);

        int Add(HUser model);

		int Add(HUser model, SqlTransaction trans);

		int Modify(HUser model);

		int Modify(HUser model, SqlTransaction trans);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
		int Delete(string sqlcondi, params SqlParameter[] param);
		
		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="sqlcondi">条件形式 where id=1</param>
        /// <returns></returns>
        int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param);

        int Delete(int id);

		int Delete(int id, SqlTransaction trans);

		/// <summary>
		/// 只读库读取数据
		/// </summary>
        HUser Get(int id);
        /// <summary>
		/// 读写库读取数据
		/// </summary>
        HUser GetRw(int id);
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
        //HUser Get(int id, SqlTransaction trans);
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        List<HUser> GetAll();
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        List<HUser> GetAllRw();
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<HUser> GetAll(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<HUser> GetAllRw(string Condi, params SqlParameter[] param);
		/// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<HUser> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        List<HUser> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param);
        /// <summary>
		/// 带事物库读取数据
		/// </summary>
        List<HUser> GetAll(SqlTransaction trans);
	    /// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		List<HUser> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param);
    }
}

