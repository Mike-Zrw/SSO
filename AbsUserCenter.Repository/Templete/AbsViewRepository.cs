

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using AbsUserCenter.Core.Model;
using AbsUserCenter.Core.IRepository;
using AbsUserCenter.Repository.DBUtility;
namespace AbsUserCenter.Repository
{   
	public partial class BPermissionRepository:IBPermissionRepository
    {
		public int AddReturnId(BPermission model)
        {
			string sql="insert into BPermission(PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL) values(@PMS_ID,@PMS_DESC,@PMS_PMT_ID,@PMS_PARENT_ID,@PMS_SYS_ID,@PMS_DELETED_FLAG,@PMS_ORDER_NUM,@PMS_CREATIONUID,@PMS_CREATION_DT,@PMS_URL);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID", SqlDbType.Int,4) { Value = model.PMS_ID },new SqlParameter("@PMS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_DESC) },new SqlParameter("@PMS_PMT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_PMT_ID) },new SqlParameter("@PMS_PARENT_ID", SqlDbType.Int,4) { Value = model.PMS_PARENT_ID },new SqlParameter("@PMS_SYS_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_SYS_ID) },new SqlParameter("@PMS_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.PMS_DELETED_FLAG },new SqlParameter("@PMS_ORDER_NUM", SqlDbType.Int,4) { Value = model.PMS_ORDER_NUM },new SqlParameter("@PMS_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.PMS_CREATIONUID) },new SqlParameter("@PMS_CREATION_DT", SqlDbType.DateTime,8) { Value = model.PMS_CREATION_DT },new SqlParameter("@PMS_URL", SqlDbType.VarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_URL) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sql, param));
		}

		public int AddReturnId(BPermission model, SqlTransaction trans)
        {
			string sql="insert into BPermission(PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL) values(@PMS_ID,@PMS_DESC,@PMS_PMT_ID,@PMS_PARENT_ID,@PMS_SYS_ID,@PMS_DELETED_FLAG,@PMS_ORDER_NUM,@PMS_CREATIONUID,@PMS_CREATION_DT,@PMS_URL);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID", SqlDbType.Int,4) { Value = model.PMS_ID },new SqlParameter("@PMS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_DESC) },new SqlParameter("@PMS_PMT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_PMT_ID) },new SqlParameter("@PMS_PARENT_ID", SqlDbType.Int,4) { Value = model.PMS_PARENT_ID },new SqlParameter("@PMS_SYS_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_SYS_ID) },new SqlParameter("@PMS_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.PMS_DELETED_FLAG },new SqlParameter("@PMS_ORDER_NUM", SqlDbType.Int,4) { Value = model.PMS_ORDER_NUM },new SqlParameter("@PMS_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.PMS_CREATIONUID) },new SqlParameter("@PMS_CREATION_DT", SqlDbType.DateTime,8) { Value = model.PMS_CREATION_DT },new SqlParameter("@PMS_URL", SqlDbType.VarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_URL) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(trans, CommandType.Text, sql, param));
		}

        public int Add(BPermission model)
        {
			string sql="insert into BPermission(PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL) values(@PMS_ID,@PMS_DESC,@PMS_PMT_ID,@PMS_PARENT_ID,@PMS_SYS_ID,@PMS_DELETED_FLAG,@PMS_ORDER_NUM,@PMS_CREATIONUID,@PMS_CREATION_DT,@PMS_URL)";
            SqlParameter[] param = { new SqlParameter("@PMS_ID", SqlDbType.Int,4) { Value = model.PMS_ID },new SqlParameter("@PMS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_DESC) },new SqlParameter("@PMS_PMT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_PMT_ID) },new SqlParameter("@PMS_PARENT_ID", SqlDbType.Int,4) { Value = model.PMS_PARENT_ID },new SqlParameter("@PMS_SYS_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_SYS_ID) },new SqlParameter("@PMS_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.PMS_DELETED_FLAG },new SqlParameter("@PMS_ORDER_NUM", SqlDbType.Int,4) { Value = model.PMS_ORDER_NUM },new SqlParameter("@PMS_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.PMS_CREATIONUID) },new SqlParameter("@PMS_CREATION_DT", SqlDbType.DateTime,8) { Value = model.PMS_CREATION_DT },new SqlParameter("@PMS_URL", SqlDbType.VarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_URL) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Add(BPermission model, SqlTransaction trans)
        {
			string sql="insert into BPermission(PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL) values(@PMS_ID,@PMS_DESC,@PMS_PMT_ID,@PMS_PARENT_ID,@PMS_SYS_ID,@PMS_DELETED_FLAG,@PMS_ORDER_NUM,@PMS_CREATIONUID,@PMS_CREATION_DT,@PMS_URL)";
            SqlParameter[] param = { new SqlParameter("@PMS_ID", SqlDbType.Int,4) { Value = model.PMS_ID },new SqlParameter("@PMS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_DESC) },new SqlParameter("@PMS_PMT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_PMT_ID) },new SqlParameter("@PMS_PARENT_ID", SqlDbType.Int,4) { Value = model.PMS_PARENT_ID },new SqlParameter("@PMS_SYS_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_SYS_ID) },new SqlParameter("@PMS_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.PMS_DELETED_FLAG },new SqlParameter("@PMS_ORDER_NUM", SqlDbType.Int,4) { Value = model.PMS_ORDER_NUM },new SqlParameter("@PMS_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.PMS_CREATIONUID) },new SqlParameter("@PMS_CREATION_DT", SqlDbType.DateTime,8) { Value = model.PMS_CREATION_DT },new SqlParameter("@PMS_URL", SqlDbType.VarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_URL) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Modify(BPermission model)
        {
            string sql = "update BPermission set PMS_DESC=@PMS_DESC,PMS_PMT_ID=@PMS_PMT_ID,PMS_PARENT_ID=@PMS_PARENT_ID,PMS_SYS_ID=@PMS_SYS_ID,PMS_DELETED_FLAG=@PMS_DELETED_FLAG,PMS_ORDER_NUM=@PMS_ORDER_NUM,PMS_CREATIONUID=@PMS_CREATIONUID,PMS_CREATION_DT=@PMS_CREATION_DT,PMS_URL=@PMS_URL where  PMS_ID=@PMS_ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID", SqlDbType.Int,4) { Value = model.PMS_ID },new SqlParameter("@PMS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_DESC) },new SqlParameter("@PMS_PMT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_PMT_ID) },new SqlParameter("@PMS_PARENT_ID", SqlDbType.Int,4) { Value = model.PMS_PARENT_ID },new SqlParameter("@PMS_SYS_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_SYS_ID) },new SqlParameter("@PMS_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.PMS_DELETED_FLAG },new SqlParameter("@PMS_ORDER_NUM", SqlDbType.Int,4) { Value = model.PMS_ORDER_NUM },new SqlParameter("@PMS_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.PMS_CREATIONUID) },new SqlParameter("@PMS_CREATION_DT", SqlDbType.DateTime,8) { Value = model.PMS_CREATION_DT },new SqlParameter("@PMS_URL", SqlDbType.VarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_URL) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Modify(BPermission model, SqlTransaction trans)
        {
			string sql = "update BPermission set PMS_DESC=@PMS_DESC,PMS_PMT_ID=@PMS_PMT_ID,PMS_PARENT_ID=@PMS_PARENT_ID,PMS_SYS_ID=@PMS_SYS_ID,PMS_DELETED_FLAG=@PMS_DELETED_FLAG,PMS_ORDER_NUM=@PMS_ORDER_NUM,PMS_CREATIONUID=@PMS_CREATIONUID,PMS_CREATION_DT=@PMS_CREATION_DT,PMS_URL=@PMS_URL where  PMS_ID=@PMS_ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID", SqlDbType.Int,4) { Value = model.PMS_ID },new SqlParameter("@PMS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_DESC) },new SqlParameter("@PMS_PMT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_PMT_ID) },new SqlParameter("@PMS_PARENT_ID", SqlDbType.Int,4) { Value = model.PMS_PARENT_ID },new SqlParameter("@PMS_SYS_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.PMS_SYS_ID) },new SqlParameter("@PMS_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.PMS_DELETED_FLAG },new SqlParameter("@PMS_ORDER_NUM", SqlDbType.Int,4) { Value = model.PMS_ORDER_NUM },new SqlParameter("@PMS_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.PMS_CREATIONUID) },new SqlParameter("@PMS_CREATION_DT", SqlDbType.DateTime,8) { Value = model.PMS_CREATION_DT },new SqlParameter("@PMS_URL", SqlDbType.VarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.PMS_URL) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Delete(string sqlcondi, params SqlParameter[] param)
        {
            string sql =  "delete BPermission "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

        public int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param)
        {
            string sql =  "delete BPermission "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }

        public int Delete(int id)
        {
            string sql = "delete BPermission  where PMS_ID=@PMS_ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID",id) };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

		public int Delete(int id, SqlTransaction trans)
        {
            string sql = "delete BPermission  where PMS_ID=@PMS_ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID",id) };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public BPermission Get(int id)
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission WITH(NOLOCK) where PMS_ID=@PMS_ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID",id) };
            BPermission model = new BPermission();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.PMS_ID = DbLib.IsInt(reader,i++);
                  	model.PMS_DESC = DbLib.IsString(reader,i++);
                  	model.PMS_PMT_ID = DbLib.IsIntNull(reader,i++);
                  	model.PMS_PARENT_ID = DbLib.IsInt(reader,i++);
                  	model.PMS_SYS_ID = DbLib.IsIntNull(reader,i++);
                  	model.PMS_DELETED_FLAG = DbLib.IsBit(reader,i++);
                  	model.PMS_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.PMS_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.PMS_CREATION_DT = DbLib.IsDateTime(reader,i++);
                  	model.PMS_URL = DbLib.IsString(reader,i++);
                }
            }
            return model;
        }
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public BPermission GetRw(int id)
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission where PMS_ID=@PMS_ID";
            SqlParameter[] param = { new SqlParameter("@PMS_ID",id) };
            BPermission model = new BPermission();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.PMS_ID = DbLib.IsInt(reader,i++);
                  	model.PMS_DESC = DbLib.IsString(reader,i++);
                  	model.PMS_PMT_ID = DbLib.IsIntNull(reader,i++);
                  	model.PMS_PARENT_ID = DbLib.IsInt(reader,i++);
                  	model.PMS_SYS_ID = DbLib.IsIntNull(reader,i++);
                  	model.PMS_DELETED_FLAG = DbLib.IsBit(reader,i++);
                  	model.PMS_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.PMS_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.PMS_CREATION_DT = DbLib.IsDateTime(reader,i++);
                  	model.PMS_URL = DbLib.IsString(reader,i++);
                }
            }
            return model;
        }

	  
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public List<BPermission> GetAll()
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission WITH(NOLOCK)";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public List<BPermission> GetAllRw()
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BPermission> GetAll(string Condi, params SqlParameter[] param)
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission WITH(NOLOCK) "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
        /// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BPermission> GetAllRw(string Condi, params SqlParameter[] param)
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		 /// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BPermission> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BPermission WITH(NOLOCK) "+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BPermission WITH(NOLOCK) " + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RoViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BPermission> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BPermission"+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BPermission" + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
       public List<BPermission> GetAll(SqlTransaction trans)
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		public List<BPermission> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param)
        {
            string sql = "select PMS_ID,PMS_DESC,PMS_PMT_ID,PMS_PARENT_ID,PMS_SYS_ID,PMS_DELETED_FLAG,PMS_ORDER_NUM,PMS_CREATIONUID,PMS_CREATION_DT,PMS_URL from BPermission "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// sqlDataReader转成该类的集合
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
		public static List<BPermission> SqlDataReaderToListObject(SqlDataReader reader)
		{
            List<BPermission> listresult = new List<BPermission>();
			while (reader.Read())
            {
				int i = 0;
				BPermission model = new BPermission();
				model.PMS_ID = DbLib.IsInt(reader,i++);
                  	model.PMS_DESC = DbLib.IsString(reader,i++);
                  	model.PMS_PMT_ID = DbLib.IsIntNull(reader,i++);
                  	model.PMS_PARENT_ID = DbLib.IsInt(reader,i++);
                  	model.PMS_SYS_ID = DbLib.IsIntNull(reader,i++);
                  	model.PMS_DELETED_FLAG = DbLib.IsBit(reader,i++);
                  	model.PMS_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.PMS_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.PMS_CREATION_DT = DbLib.IsDateTime(reader,i++);
                  	model.PMS_URL = DbLib.IsString(reader,i++);
				listresult.Add(model);
            }
            return listresult;
		}
    }
}
namespace AbsUserCenter.Repository
{   
	public partial class BRoleRepository:IBRoleRepository
    {
		public int AddReturnId(BRole model)
        {
			string sql="insert into BRole(ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT) values(@ROL_DESC,@ROL_MEMO,@ROL_ORDER_NUM,@ROL_DELETED_FLAG,@ROL_DPT_ID,@ROL_CREATIONUID,@ROL_CREATION_DT);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@ROL_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DESC) },new SqlParameter("@ROL_MEMO", SqlDbType.NVarChar,1000) { Value = SqlHelper.SqlParamterNullValue(model.ROL_MEMO) },new SqlParameter("@ROL_ORDER_NUM", SqlDbType.Int,4) { Value = model.ROL_ORDER_NUM },new SqlParameter("@ROL_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.ROL_DELETED_FLAG },new SqlParameter("@ROL_DPT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DPT_ID) },new SqlParameter("@ROL_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.ROL_CREATIONUID) },new SqlParameter("@ROL_CREATION_DT", SqlDbType.DateTime,8) { Value = model.ROL_CREATION_DT } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sql, param));
		}

		public int AddReturnId(BRole model, SqlTransaction trans)
        {
			string sql="insert into BRole(ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT) values(@ROL_DESC,@ROL_MEMO,@ROL_ORDER_NUM,@ROL_DELETED_FLAG,@ROL_DPT_ID,@ROL_CREATIONUID,@ROL_CREATION_DT);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@ROL_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DESC) },new SqlParameter("@ROL_MEMO", SqlDbType.NVarChar,1000) { Value = SqlHelper.SqlParamterNullValue(model.ROL_MEMO) },new SqlParameter("@ROL_ORDER_NUM", SqlDbType.Int,4) { Value = model.ROL_ORDER_NUM },new SqlParameter("@ROL_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.ROL_DELETED_FLAG },new SqlParameter("@ROL_DPT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DPT_ID) },new SqlParameter("@ROL_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.ROL_CREATIONUID) },new SqlParameter("@ROL_CREATION_DT", SqlDbType.DateTime,8) { Value = model.ROL_CREATION_DT } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(trans, CommandType.Text, sql, param));
		}

        public int Add(BRole model)
        {
			string sql="insert into BRole(ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT) values(@ROL_DESC,@ROL_MEMO,@ROL_ORDER_NUM,@ROL_DELETED_FLAG,@ROL_DPT_ID,@ROL_CREATIONUID,@ROL_CREATION_DT)";
            SqlParameter[] param = { new SqlParameter("@ROL_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DESC) },new SqlParameter("@ROL_MEMO", SqlDbType.NVarChar,1000) { Value = SqlHelper.SqlParamterNullValue(model.ROL_MEMO) },new SqlParameter("@ROL_ORDER_NUM", SqlDbType.Int,4) { Value = model.ROL_ORDER_NUM },new SqlParameter("@ROL_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.ROL_DELETED_FLAG },new SqlParameter("@ROL_DPT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DPT_ID) },new SqlParameter("@ROL_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.ROL_CREATIONUID) },new SqlParameter("@ROL_CREATION_DT", SqlDbType.DateTime,8) { Value = model.ROL_CREATION_DT } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Add(BRole model, SqlTransaction trans)
        {
			string sql="insert into BRole(ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT) values(@ROL_DESC,@ROL_MEMO,@ROL_ORDER_NUM,@ROL_DELETED_FLAG,@ROL_DPT_ID,@ROL_CREATIONUID,@ROL_CREATION_DT)";
            SqlParameter[] param = { new SqlParameter("@ROL_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DESC) },new SqlParameter("@ROL_MEMO", SqlDbType.NVarChar,1000) { Value = SqlHelper.SqlParamterNullValue(model.ROL_MEMO) },new SqlParameter("@ROL_ORDER_NUM", SqlDbType.Int,4) { Value = model.ROL_ORDER_NUM },new SqlParameter("@ROL_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.ROL_DELETED_FLAG },new SqlParameter("@ROL_DPT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DPT_ID) },new SqlParameter("@ROL_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.ROL_CREATIONUID) },new SqlParameter("@ROL_CREATION_DT", SqlDbType.DateTime,8) { Value = model.ROL_CREATION_DT } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Modify(BRole model)
        {
            string sql = "update BRole set ROL_DESC=@ROL_DESC,ROL_MEMO=@ROL_MEMO,ROL_ORDER_NUM=@ROL_ORDER_NUM,ROL_DELETED_FLAG=@ROL_DELETED_FLAG,ROL_DPT_ID=@ROL_DPT_ID,ROL_CREATIONUID=@ROL_CREATIONUID,ROL_CREATION_DT=@ROL_CREATION_DT where  ROL_ID=@ROL_ID";
            SqlParameter[] param = { new SqlParameter("@ROL_ID", SqlDbType.Int,4) { Value = model.ROL_ID },new SqlParameter("@ROL_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DESC) },new SqlParameter("@ROL_MEMO", SqlDbType.NVarChar,1000) { Value = SqlHelper.SqlParamterNullValue(model.ROL_MEMO) },new SqlParameter("@ROL_ORDER_NUM", SqlDbType.Int,4) { Value = model.ROL_ORDER_NUM },new SqlParameter("@ROL_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.ROL_DELETED_FLAG },new SqlParameter("@ROL_DPT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DPT_ID) },new SqlParameter("@ROL_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.ROL_CREATIONUID) },new SqlParameter("@ROL_CREATION_DT", SqlDbType.DateTime,8) { Value = model.ROL_CREATION_DT } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Modify(BRole model, SqlTransaction trans)
        {
			string sql = "update BRole set ROL_DESC=@ROL_DESC,ROL_MEMO=@ROL_MEMO,ROL_ORDER_NUM=@ROL_ORDER_NUM,ROL_DELETED_FLAG=@ROL_DELETED_FLAG,ROL_DPT_ID=@ROL_DPT_ID,ROL_CREATIONUID=@ROL_CREATIONUID,ROL_CREATION_DT=@ROL_CREATION_DT where  ROL_ID=@ROL_ID";
            SqlParameter[] param = { new SqlParameter("@ROL_ID", SqlDbType.Int,4) { Value = model.ROL_ID },new SqlParameter("@ROL_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DESC) },new SqlParameter("@ROL_MEMO", SqlDbType.NVarChar,1000) { Value = SqlHelper.SqlParamterNullValue(model.ROL_MEMO) },new SqlParameter("@ROL_ORDER_NUM", SqlDbType.Int,4) { Value = model.ROL_ORDER_NUM },new SqlParameter("@ROL_DELETED_FLAG", SqlDbType.Bit,1) { Value = model.ROL_DELETED_FLAG },new SqlParameter("@ROL_DPT_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.ROL_DPT_ID) },new SqlParameter("@ROL_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.ROL_CREATIONUID) },new SqlParameter("@ROL_CREATION_DT", SqlDbType.DateTime,8) { Value = model.ROL_CREATION_DT } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Delete(string sqlcondi, params SqlParameter[] param)
        {
            string sql =  "delete BRole "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

        public int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param)
        {
            string sql =  "delete BRole "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }

        public int Delete(int id)
        {
            string sql = "delete BRole  where ROL_ID=@ROL_ID";
            SqlParameter[] param = { new SqlParameter("@ROL_ID",id) };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

		public int Delete(int id, SqlTransaction trans)
        {
            string sql = "delete BRole  where ROL_ID=@ROL_ID";
            SqlParameter[] param = { new SqlParameter("@ROL_ID",id) };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public BRole Get(int id)
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole WITH(NOLOCK) where ROL_ID=@ROL_ID";
            SqlParameter[] param = { new SqlParameter("@ROL_ID",id) };
            BRole model = new BRole();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.ROL_ID = DbLib.IsInt(reader,i++);
                  	model.ROL_DESC = DbLib.IsString(reader,i++);
                  	model.ROL_MEMO = DbLib.IsString(reader,i++);
                  	model.ROL_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.ROL_DELETED_FLAG = DbLib.IsBit(reader,i++);
                  	model.ROL_DPT_ID = DbLib.IsIntNull(reader,i++);
                  	model.ROL_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.ROL_CREATION_DT = DbLib.IsDateTime(reader,i++);
                }
            }
            return model;
        }
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public BRole GetRw(int id)
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole where ROL_ID=@ROL_ID";
            SqlParameter[] param = { new SqlParameter("@ROL_ID",id) };
            BRole model = new BRole();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.ROL_ID = DbLib.IsInt(reader,i++);
                  	model.ROL_DESC = DbLib.IsString(reader,i++);
                  	model.ROL_MEMO = DbLib.IsString(reader,i++);
                  	model.ROL_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.ROL_DELETED_FLAG = DbLib.IsBit(reader,i++);
                  	model.ROL_DPT_ID = DbLib.IsIntNull(reader,i++);
                  	model.ROL_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.ROL_CREATION_DT = DbLib.IsDateTime(reader,i++);
                }
            }
            return model;
        }

	  
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public List<BRole> GetAll()
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole WITH(NOLOCK)";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public List<BRole> GetAllRw()
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BRole> GetAll(string Condi, params SqlParameter[] param)
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole WITH(NOLOCK) "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
        /// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BRole> GetAllRw(string Condi, params SqlParameter[] param)
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		 /// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BRole> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BRole WITH(NOLOCK) "+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BRole WITH(NOLOCK) " + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RoViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BRole> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BRole"+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BRole" + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
       public List<BRole> GetAll(SqlTransaction trans)
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		public List<BRole> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param)
        {
            string sql = "select ROL_ID,ROL_DESC,ROL_MEMO,ROL_ORDER_NUM,ROL_DELETED_FLAG,ROL_DPT_ID,ROL_CREATIONUID,ROL_CREATION_DT from BRole "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// sqlDataReader转成该类的集合
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
		public static List<BRole> SqlDataReaderToListObject(SqlDataReader reader)
		{
            List<BRole> listresult = new List<BRole>();
			while (reader.Read())
            {
				int i = 0;
				BRole model = new BRole();
				model.ROL_ID = DbLib.IsInt(reader,i++);
                  	model.ROL_DESC = DbLib.IsString(reader,i++);
                  	model.ROL_MEMO = DbLib.IsString(reader,i++);
                  	model.ROL_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.ROL_DELETED_FLAG = DbLib.IsBit(reader,i++);
                  	model.ROL_DPT_ID = DbLib.IsIntNull(reader,i++);
                  	model.ROL_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.ROL_CREATION_DT = DbLib.IsDateTime(reader,i++);
				listresult.Add(model);
            }
            return listresult;
		}
    }
}
namespace AbsUserCenter.Repository
{   
	public partial class BSystemRepository:IBSystemRepository
    {
		public int AddReturnId(BSystem model)
        {
			string sql="insert into BSystem(SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN) values(@SYS_ID,@SYS_DESC,@SYS_ORDER_NUM,@SYS_ENABLED_FLAG,@SYS_DOMAIN);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID", SqlDbType.Int,4) { Value = model.SYS_ID },new SqlParameter("@SYS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DESC) },new SqlParameter("@SYS_ORDER_NUM", SqlDbType.Int,4) { Value = model.SYS_ORDER_NUM },new SqlParameter("@SYS_ENABLED_FLAG", SqlDbType.Bit,1) { Value = model.SYS_ENABLED_FLAG },new SqlParameter("@SYS_DOMAIN", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DOMAIN) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sql, param));
		}

		public int AddReturnId(BSystem model, SqlTransaction trans)
        {
			string sql="insert into BSystem(SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN) values(@SYS_ID,@SYS_DESC,@SYS_ORDER_NUM,@SYS_ENABLED_FLAG,@SYS_DOMAIN);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID", SqlDbType.Int,4) { Value = model.SYS_ID },new SqlParameter("@SYS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DESC) },new SqlParameter("@SYS_ORDER_NUM", SqlDbType.Int,4) { Value = model.SYS_ORDER_NUM },new SqlParameter("@SYS_ENABLED_FLAG", SqlDbType.Bit,1) { Value = model.SYS_ENABLED_FLAG },new SqlParameter("@SYS_DOMAIN", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DOMAIN) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(trans, CommandType.Text, sql, param));
		}

        public int Add(BSystem model)
        {
			string sql="insert into BSystem(SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN) values(@SYS_ID,@SYS_DESC,@SYS_ORDER_NUM,@SYS_ENABLED_FLAG,@SYS_DOMAIN)";
            SqlParameter[] param = { new SqlParameter("@SYS_ID", SqlDbType.Int,4) { Value = model.SYS_ID },new SqlParameter("@SYS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DESC) },new SqlParameter("@SYS_ORDER_NUM", SqlDbType.Int,4) { Value = model.SYS_ORDER_NUM },new SqlParameter("@SYS_ENABLED_FLAG", SqlDbType.Bit,1) { Value = model.SYS_ENABLED_FLAG },new SqlParameter("@SYS_DOMAIN", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DOMAIN) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Add(BSystem model, SqlTransaction trans)
        {
			string sql="insert into BSystem(SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN) values(@SYS_ID,@SYS_DESC,@SYS_ORDER_NUM,@SYS_ENABLED_FLAG,@SYS_DOMAIN)";
            SqlParameter[] param = { new SqlParameter("@SYS_ID", SqlDbType.Int,4) { Value = model.SYS_ID },new SqlParameter("@SYS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DESC) },new SqlParameter("@SYS_ORDER_NUM", SqlDbType.Int,4) { Value = model.SYS_ORDER_NUM },new SqlParameter("@SYS_ENABLED_FLAG", SqlDbType.Bit,1) { Value = model.SYS_ENABLED_FLAG },new SqlParameter("@SYS_DOMAIN", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DOMAIN) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Modify(BSystem model)
        {
            string sql = "update BSystem set SYS_DESC=@SYS_DESC,SYS_ORDER_NUM=@SYS_ORDER_NUM,SYS_ENABLED_FLAG=@SYS_ENABLED_FLAG,SYS_DOMAIN=@SYS_DOMAIN where  SYS_ID=@SYS_ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID", SqlDbType.Int,4) { Value = model.SYS_ID },new SqlParameter("@SYS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DESC) },new SqlParameter("@SYS_ORDER_NUM", SqlDbType.Int,4) { Value = model.SYS_ORDER_NUM },new SqlParameter("@SYS_ENABLED_FLAG", SqlDbType.Bit,1) { Value = model.SYS_ENABLED_FLAG },new SqlParameter("@SYS_DOMAIN", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DOMAIN) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Modify(BSystem model, SqlTransaction trans)
        {
			string sql = "update BSystem set SYS_DESC=@SYS_DESC,SYS_ORDER_NUM=@SYS_ORDER_NUM,SYS_ENABLED_FLAG=@SYS_ENABLED_FLAG,SYS_DOMAIN=@SYS_DOMAIN where  SYS_ID=@SYS_ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID", SqlDbType.Int,4) { Value = model.SYS_ID },new SqlParameter("@SYS_DESC", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DESC) },new SqlParameter("@SYS_ORDER_NUM", SqlDbType.Int,4) { Value = model.SYS_ORDER_NUM },new SqlParameter("@SYS_ENABLED_FLAG", SqlDbType.Bit,1) { Value = model.SYS_ENABLED_FLAG },new SqlParameter("@SYS_DOMAIN", SqlDbType.NVarChar,200) { Value = SqlHelper.SqlParamterNullValue(model.SYS_DOMAIN) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Delete(string sqlcondi, params SqlParameter[] param)
        {
            string sql =  "delete BSystem "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

        public int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param)
        {
            string sql =  "delete BSystem "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }

        public int Delete(int id)
        {
            string sql = "delete BSystem  where SYS_ID=@SYS_ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID",id) };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

		public int Delete(int id, SqlTransaction trans)
        {
            string sql = "delete BSystem  where SYS_ID=@SYS_ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID",id) };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public BSystem Get(int id)
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem WITH(NOLOCK) where SYS_ID=@SYS_ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID",id) };
            BSystem model = new BSystem();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.SYS_ID = DbLib.IsInt(reader,i++);
                  	model.SYS_DESC = DbLib.IsString(reader,i++);
                  	model.SYS_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.SYS_ENABLED_FLAG = DbLib.IsBit(reader,i++);
                  	model.SYS_DOMAIN = DbLib.IsString(reader,i++);
                }
            }
            return model;
        }
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public BSystem GetRw(int id)
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem where SYS_ID=@SYS_ID";
            SqlParameter[] param = { new SqlParameter("@SYS_ID",id) };
            BSystem model = new BSystem();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.SYS_ID = DbLib.IsInt(reader,i++);
                  	model.SYS_DESC = DbLib.IsString(reader,i++);
                  	model.SYS_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.SYS_ENABLED_FLAG = DbLib.IsBit(reader,i++);
                  	model.SYS_DOMAIN = DbLib.IsString(reader,i++);
                }
            }
            return model;
        }

	  
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public List<BSystem> GetAll()
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem WITH(NOLOCK)";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public List<BSystem> GetAllRw()
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BSystem> GetAll(string Condi, params SqlParameter[] param)
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem WITH(NOLOCK) "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
        /// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BSystem> GetAllRw(string Condi, params SqlParameter[] param)
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		 /// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BSystem> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BSystem WITH(NOLOCK) "+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BSystem WITH(NOLOCK) " + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RoViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BSystem> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BSystem"+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BSystem" + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
       public List<BSystem> GetAll(SqlTransaction trans)
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		public List<BSystem> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param)
        {
            string sql = "select SYS_ID,SYS_DESC,SYS_ORDER_NUM,SYS_ENABLED_FLAG,SYS_DOMAIN from BSystem "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// sqlDataReader转成该类的集合
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
		public static List<BSystem> SqlDataReaderToListObject(SqlDataReader reader)
		{
            List<BSystem> listresult = new List<BSystem>();
			while (reader.Read())
            {
				int i = 0;
				BSystem model = new BSystem();
				model.SYS_ID = DbLib.IsInt(reader,i++);
                  	model.SYS_DESC = DbLib.IsString(reader,i++);
                  	model.SYS_ORDER_NUM = DbLib.IsInt(reader,i++);
                  	model.SYS_ENABLED_FLAG = DbLib.IsBit(reader,i++);
                  	model.SYS_DOMAIN = DbLib.IsString(reader,i++);
				listresult.Add(model);
            }
            return listresult;
		}
    }
}
namespace AbsUserCenter.Repository
{   
	public partial class BUserRepository:IBUserRepository
    {
		public int AddReturnId(BUser model)
        {
			string sql="insert into BUser(USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE) values(@USR_LOGINNAME,@USR_PASSWORD,@USR_NAME,@USR_EMAIL,@USR_BOSS_EMAIL,@USR_ACCESS_FLAG,@USR_LASTACTIVE_DT,@USR_ONLINE_FLAG,@USR_ROL_ID,@USR_CREATIONUID,@USR_CREATION_DT,@USR_WECHAT_OPENID,@USR_PHONE);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@USR_LOGINNAME", SqlDbType.VarChar,50) { Value = model.USR_LOGINNAME },new SqlParameter("@USR_PASSWORD", SqlDbType.VarChar,50) { Value = model.USR_PASSWORD },new SqlParameter("@USR_NAME", SqlDbType.NVarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_NAME) },new SqlParameter("@USR_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_EMAIL) },new SqlParameter("@USR_BOSS_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_BOSS_EMAIL) },new SqlParameter("@USR_ACCESS_FLAG", SqlDbType.Bit,1) { Value = model.USR_ACCESS_FLAG },new SqlParameter("@USR_LASTACTIVE_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.USR_LASTACTIVE_DT) },new SqlParameter("@USR_ONLINE_FLAG", SqlDbType.Bit,1) { Value = model.USR_ONLINE_FLAG },new SqlParameter("@USR_ROL_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.USR_ROL_ID) },new SqlParameter("@USR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_CREATIONUID) },new SqlParameter("@USR_CREATION_DT", SqlDbType.DateTime,8) { Value = model.USR_CREATION_DT },new SqlParameter("@USR_WECHAT_OPENID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_WECHAT_OPENID) },new SqlParameter("@USR_PHONE", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.USR_PHONE) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sql, param));
		}

		public int AddReturnId(BUser model, SqlTransaction trans)
        {
			string sql="insert into BUser(USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE) values(@USR_LOGINNAME,@USR_PASSWORD,@USR_NAME,@USR_EMAIL,@USR_BOSS_EMAIL,@USR_ACCESS_FLAG,@USR_LASTACTIVE_DT,@USR_ONLINE_FLAG,@USR_ROL_ID,@USR_CREATIONUID,@USR_CREATION_DT,@USR_WECHAT_OPENID,@USR_PHONE);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@USR_LOGINNAME", SqlDbType.VarChar,50) { Value = model.USR_LOGINNAME },new SqlParameter("@USR_PASSWORD", SqlDbType.VarChar,50) { Value = model.USR_PASSWORD },new SqlParameter("@USR_NAME", SqlDbType.NVarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_NAME) },new SqlParameter("@USR_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_EMAIL) },new SqlParameter("@USR_BOSS_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_BOSS_EMAIL) },new SqlParameter("@USR_ACCESS_FLAG", SqlDbType.Bit,1) { Value = model.USR_ACCESS_FLAG },new SqlParameter("@USR_LASTACTIVE_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.USR_LASTACTIVE_DT) },new SqlParameter("@USR_ONLINE_FLAG", SqlDbType.Bit,1) { Value = model.USR_ONLINE_FLAG },new SqlParameter("@USR_ROL_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.USR_ROL_ID) },new SqlParameter("@USR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_CREATIONUID) },new SqlParameter("@USR_CREATION_DT", SqlDbType.DateTime,8) { Value = model.USR_CREATION_DT },new SqlParameter("@USR_WECHAT_OPENID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_WECHAT_OPENID) },new SqlParameter("@USR_PHONE", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.USR_PHONE) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(trans, CommandType.Text, sql, param));
		}

        public int Add(BUser model)
        {
			string sql="insert into BUser(USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE) values(@USR_LOGINNAME,@USR_PASSWORD,@USR_NAME,@USR_EMAIL,@USR_BOSS_EMAIL,@USR_ACCESS_FLAG,@USR_LASTACTIVE_DT,@USR_ONLINE_FLAG,@USR_ROL_ID,@USR_CREATIONUID,@USR_CREATION_DT,@USR_WECHAT_OPENID,@USR_PHONE)";
            SqlParameter[] param = { new SqlParameter("@USR_LOGINNAME", SqlDbType.VarChar,50) { Value = model.USR_LOGINNAME },new SqlParameter("@USR_PASSWORD", SqlDbType.VarChar,50) { Value = model.USR_PASSWORD },new SqlParameter("@USR_NAME", SqlDbType.NVarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_NAME) },new SqlParameter("@USR_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_EMAIL) },new SqlParameter("@USR_BOSS_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_BOSS_EMAIL) },new SqlParameter("@USR_ACCESS_FLAG", SqlDbType.Bit,1) { Value = model.USR_ACCESS_FLAG },new SqlParameter("@USR_LASTACTIVE_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.USR_LASTACTIVE_DT) },new SqlParameter("@USR_ONLINE_FLAG", SqlDbType.Bit,1) { Value = model.USR_ONLINE_FLAG },new SqlParameter("@USR_ROL_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.USR_ROL_ID) },new SqlParameter("@USR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_CREATIONUID) },new SqlParameter("@USR_CREATION_DT", SqlDbType.DateTime,8) { Value = model.USR_CREATION_DT },new SqlParameter("@USR_WECHAT_OPENID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_WECHAT_OPENID) },new SqlParameter("@USR_PHONE", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.USR_PHONE) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Add(BUser model, SqlTransaction trans)
        {
			string sql="insert into BUser(USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE) values(@USR_LOGINNAME,@USR_PASSWORD,@USR_NAME,@USR_EMAIL,@USR_BOSS_EMAIL,@USR_ACCESS_FLAG,@USR_LASTACTIVE_DT,@USR_ONLINE_FLAG,@USR_ROL_ID,@USR_CREATIONUID,@USR_CREATION_DT,@USR_WECHAT_OPENID,@USR_PHONE)";
            SqlParameter[] param = { new SqlParameter("@USR_LOGINNAME", SqlDbType.VarChar,50) { Value = model.USR_LOGINNAME },new SqlParameter("@USR_PASSWORD", SqlDbType.VarChar,50) { Value = model.USR_PASSWORD },new SqlParameter("@USR_NAME", SqlDbType.NVarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_NAME) },new SqlParameter("@USR_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_EMAIL) },new SqlParameter("@USR_BOSS_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_BOSS_EMAIL) },new SqlParameter("@USR_ACCESS_FLAG", SqlDbType.Bit,1) { Value = model.USR_ACCESS_FLAG },new SqlParameter("@USR_LASTACTIVE_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.USR_LASTACTIVE_DT) },new SqlParameter("@USR_ONLINE_FLAG", SqlDbType.Bit,1) { Value = model.USR_ONLINE_FLAG },new SqlParameter("@USR_ROL_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.USR_ROL_ID) },new SqlParameter("@USR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_CREATIONUID) },new SqlParameter("@USR_CREATION_DT", SqlDbType.DateTime,8) { Value = model.USR_CREATION_DT },new SqlParameter("@USR_WECHAT_OPENID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_WECHAT_OPENID) },new SqlParameter("@USR_PHONE", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.USR_PHONE) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Modify(BUser model)
        {
            string sql = "update BUser set USR_LOGINNAME=@USR_LOGINNAME,USR_PASSWORD=@USR_PASSWORD,USR_NAME=@USR_NAME,USR_EMAIL=@USR_EMAIL,USR_BOSS_EMAIL=@USR_BOSS_EMAIL,USR_ACCESS_FLAG=@USR_ACCESS_FLAG,USR_LASTACTIVE_DT=@USR_LASTACTIVE_DT,USR_ONLINE_FLAG=@USR_ONLINE_FLAG,USR_ROL_ID=@USR_ROL_ID,USR_CREATIONUID=@USR_CREATIONUID,USR_CREATION_DT=@USR_CREATION_DT,USR_WECHAT_OPENID=@USR_WECHAT_OPENID,USR_PHONE=@USR_PHONE where  USR_ID=@USR_ID";
            SqlParameter[] param = { new SqlParameter("@USR_ID", SqlDbType.Int,4) { Value = model.USR_ID },new SqlParameter("@USR_LOGINNAME", SqlDbType.VarChar,50) { Value = model.USR_LOGINNAME },new SqlParameter("@USR_PASSWORD", SqlDbType.VarChar,50) { Value = model.USR_PASSWORD },new SqlParameter("@USR_NAME", SqlDbType.NVarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_NAME) },new SqlParameter("@USR_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_EMAIL) },new SqlParameter("@USR_BOSS_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_BOSS_EMAIL) },new SqlParameter("@USR_ACCESS_FLAG", SqlDbType.Bit,1) { Value = model.USR_ACCESS_FLAG },new SqlParameter("@USR_LASTACTIVE_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.USR_LASTACTIVE_DT) },new SqlParameter("@USR_ONLINE_FLAG", SqlDbType.Bit,1) { Value = model.USR_ONLINE_FLAG },new SqlParameter("@USR_ROL_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.USR_ROL_ID) },new SqlParameter("@USR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_CREATIONUID) },new SqlParameter("@USR_CREATION_DT", SqlDbType.DateTime,8) { Value = model.USR_CREATION_DT },new SqlParameter("@USR_WECHAT_OPENID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_WECHAT_OPENID) },new SqlParameter("@USR_PHONE", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.USR_PHONE) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Modify(BUser model, SqlTransaction trans)
        {
			string sql = "update BUser set USR_LOGINNAME=@USR_LOGINNAME,USR_PASSWORD=@USR_PASSWORD,USR_NAME=@USR_NAME,USR_EMAIL=@USR_EMAIL,USR_BOSS_EMAIL=@USR_BOSS_EMAIL,USR_ACCESS_FLAG=@USR_ACCESS_FLAG,USR_LASTACTIVE_DT=@USR_LASTACTIVE_DT,USR_ONLINE_FLAG=@USR_ONLINE_FLAG,USR_ROL_ID=@USR_ROL_ID,USR_CREATIONUID=@USR_CREATIONUID,USR_CREATION_DT=@USR_CREATION_DT,USR_WECHAT_OPENID=@USR_WECHAT_OPENID,USR_PHONE=@USR_PHONE where  USR_ID=@USR_ID";
            SqlParameter[] param = { new SqlParameter("@USR_ID", SqlDbType.Int,4) { Value = model.USR_ID },new SqlParameter("@USR_LOGINNAME", SqlDbType.VarChar,50) { Value = model.USR_LOGINNAME },new SqlParameter("@USR_PASSWORD", SqlDbType.VarChar,50) { Value = model.USR_PASSWORD },new SqlParameter("@USR_NAME", SqlDbType.NVarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_NAME) },new SqlParameter("@USR_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_EMAIL) },new SqlParameter("@USR_BOSS_EMAIL", SqlDbType.VarChar,100) { Value = SqlHelper.SqlParamterNullValue(model.USR_BOSS_EMAIL) },new SqlParameter("@USR_ACCESS_FLAG", SqlDbType.Bit,1) { Value = model.USR_ACCESS_FLAG },new SqlParameter("@USR_LASTACTIVE_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.USR_LASTACTIVE_DT) },new SqlParameter("@USR_ONLINE_FLAG", SqlDbType.Bit,1) { Value = model.USR_ONLINE_FLAG },new SqlParameter("@USR_ROL_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.USR_ROL_ID) },new SqlParameter("@USR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_CREATIONUID) },new SqlParameter("@USR_CREATION_DT", SqlDbType.DateTime,8) { Value = model.USR_CREATION_DT },new SqlParameter("@USR_WECHAT_OPENID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.USR_WECHAT_OPENID) },new SqlParameter("@USR_PHONE", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.USR_PHONE) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Delete(string sqlcondi, params SqlParameter[] param)
        {
            string sql =  "delete BUser "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

        public int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param)
        {
            string sql =  "delete BUser "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }

        public int Delete(int id)
        {
            string sql = "delete BUser  where USR_ID=@USR_ID";
            SqlParameter[] param = { new SqlParameter("@USR_ID",id) };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

		public int Delete(int id, SqlTransaction trans)
        {
            string sql = "delete BUser  where USR_ID=@USR_ID";
            SqlParameter[] param = { new SqlParameter("@USR_ID",id) };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public BUser Get(int id)
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser WITH(NOLOCK) where USR_ID=@USR_ID";
            SqlParameter[] param = { new SqlParameter("@USR_ID",id) };
            BUser model = new BUser();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.USR_ID = DbLib.IsInt(reader,i++);
                  	model.USR_LOGINNAME = DbLib.IsString(reader,i++);
                  	model.USR_PASSWORD = DbLib.IsString(reader,i++);
                  	model.USR_NAME = DbLib.IsString(reader,i++);
                  	model.USR_EMAIL = DbLib.IsString(reader,i++);
                  	model.USR_BOSS_EMAIL = DbLib.IsString(reader,i++);
                  	model.USR_ACCESS_FLAG = DbLib.IsBit(reader,i++);
                  	model.USR_LASTACTIVE_DT = DbLib.IsDateTimeNull(reader,i++);
                  	model.USR_ONLINE_FLAG = DbLib.IsBit(reader,i++);
                  	model.USR_ROL_ID = DbLib.IsIntNull(reader,i++);
                  	model.USR_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.USR_CREATION_DT = DbLib.IsDateTime(reader,i++);
                  	model.USR_WECHAT_OPENID = DbLib.IsString(reader,i++);
                  	model.USR_PHONE = DbLib.IsString(reader,i++);
                }
            }
            return model;
        }
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public BUser GetRw(int id)
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser where USR_ID=@USR_ID";
            SqlParameter[] param = { new SqlParameter("@USR_ID",id) };
            BUser model = new BUser();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.USR_ID = DbLib.IsInt(reader,i++);
                  	model.USR_LOGINNAME = DbLib.IsString(reader,i++);
                  	model.USR_PASSWORD = DbLib.IsString(reader,i++);
                  	model.USR_NAME = DbLib.IsString(reader,i++);
                  	model.USR_EMAIL = DbLib.IsString(reader,i++);
                  	model.USR_BOSS_EMAIL = DbLib.IsString(reader,i++);
                  	model.USR_ACCESS_FLAG = DbLib.IsBit(reader,i++);
                  	model.USR_LASTACTIVE_DT = DbLib.IsDateTimeNull(reader,i++);
                  	model.USR_ONLINE_FLAG = DbLib.IsBit(reader,i++);
                  	model.USR_ROL_ID = DbLib.IsIntNull(reader,i++);
                  	model.USR_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.USR_CREATION_DT = DbLib.IsDateTime(reader,i++);
                  	model.USR_WECHAT_OPENID = DbLib.IsString(reader,i++);
                  	model.USR_PHONE = DbLib.IsString(reader,i++);
                }
            }
            return model;
        }

	  
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public List<BUser> GetAll()
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser WITH(NOLOCK)";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public List<BUser> GetAllRw()
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BUser> GetAll(string Condi, params SqlParameter[] param)
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser WITH(NOLOCK) "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
        /// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BUser> GetAllRw(string Condi, params SqlParameter[] param)
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		 /// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BUser> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BUser WITH(NOLOCK) "+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BUser WITH(NOLOCK) " + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RoViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<BUser> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from BUser"+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from BUser" + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
       public List<BUser> GetAll(SqlTransaction trans)
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		public List<BUser> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param)
        {
            string sql = "select USR_ID,USR_LOGINNAME,USR_PASSWORD,USR_NAME,USR_EMAIL,USR_BOSS_EMAIL,USR_ACCESS_FLAG,USR_LASTACTIVE_DT,USR_ONLINE_FLAG,USR_ROL_ID,USR_CREATIONUID,USR_CREATION_DT,USR_WECHAT_OPENID,USR_PHONE from BUser "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// sqlDataReader转成该类的集合
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
		public static List<BUser> SqlDataReaderToListObject(SqlDataReader reader)
		{
            List<BUser> listresult = new List<BUser>();
			while (reader.Read())
            {
				int i = 0;
				BUser model = new BUser();
				model.USR_ID = DbLib.IsInt(reader,i++);
                  	model.USR_LOGINNAME = DbLib.IsString(reader,i++);
                  	model.USR_PASSWORD = DbLib.IsString(reader,i++);
                  	model.USR_NAME = DbLib.IsString(reader,i++);
                  	model.USR_EMAIL = DbLib.IsString(reader,i++);
                  	model.USR_BOSS_EMAIL = DbLib.IsString(reader,i++);
                  	model.USR_ACCESS_FLAG = DbLib.IsBit(reader,i++);
                  	model.USR_LASTACTIVE_DT = DbLib.IsDateTimeNull(reader,i++);
                  	model.USR_ONLINE_FLAG = DbLib.IsBit(reader,i++);
                  	model.USR_ROL_ID = DbLib.IsIntNull(reader,i++);
                  	model.USR_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.USR_CREATION_DT = DbLib.IsDateTime(reader,i++);
                  	model.USR_WECHAT_OPENID = DbLib.IsString(reader,i++);
                  	model.USR_PHONE = DbLib.IsString(reader,i++);
				listresult.Add(model);
            }
            return listresult;
		}
    }
}
namespace AbsUserCenter.Repository
{   
	public partial class HUserRepository:IHUserRepository
    {
		public int AddReturnId(HUser model)
        {
			string sql="insert into HUser(HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT) values(@HUR_USR_ID,@HUR_DT,@HUR_TYPE,@HUR_IP,@HUR_CREATIONUID,@HUR_CREATION_DT);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@HUR_USR_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.HUR_USR_ID) },new SqlParameter("@HUR_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_DT) },new SqlParameter("@HUR_TYPE", SqlDbType.TinyInt,1) { Value = SqlHelper.SqlParamterNullValue(model.HUR_TYPE) },new SqlParameter("@HUR_IP", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.HUR_IP) },new SqlParameter("@HUR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATIONUID) },new SqlParameter("@HUR_CREATION_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATION_DT) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sql, param));
		}

		public int AddReturnId(HUser model, SqlTransaction trans)
        {
			string sql="insert into HUser(HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT) values(@HUR_USR_ID,@HUR_DT,@HUR_TYPE,@HUR_IP,@HUR_CREATIONUID,@HUR_CREATION_DT);select @@IDENTITY AS ID";
            SqlParameter[] param = { new SqlParameter("@HUR_USR_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.HUR_USR_ID) },new SqlParameter("@HUR_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_DT) },new SqlParameter("@HUR_TYPE", SqlDbType.TinyInt,1) { Value = SqlHelper.SqlParamterNullValue(model.HUR_TYPE) },new SqlParameter("@HUR_IP", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.HUR_IP) },new SqlParameter("@HUR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATIONUID) },new SqlParameter("@HUR_CREATION_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATION_DT) } };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(trans, CommandType.Text, sql, param));
		}

        public int Add(HUser model)
        {
			string sql="insert into HUser(HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT) values(@HUR_USR_ID,@HUR_DT,@HUR_TYPE,@HUR_IP,@HUR_CREATIONUID,@HUR_CREATION_DT)";
            SqlParameter[] param = { new SqlParameter("@HUR_USR_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.HUR_USR_ID) },new SqlParameter("@HUR_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_DT) },new SqlParameter("@HUR_TYPE", SqlDbType.TinyInt,1) { Value = SqlHelper.SqlParamterNullValue(model.HUR_TYPE) },new SqlParameter("@HUR_IP", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.HUR_IP) },new SqlParameter("@HUR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATIONUID) },new SqlParameter("@HUR_CREATION_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATION_DT) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Add(HUser model, SqlTransaction trans)
        {
			string sql="insert into HUser(HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT) values(@HUR_USR_ID,@HUR_DT,@HUR_TYPE,@HUR_IP,@HUR_CREATIONUID,@HUR_CREATION_DT)";
            SqlParameter[] param = { new SqlParameter("@HUR_USR_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.HUR_USR_ID) },new SqlParameter("@HUR_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_DT) },new SqlParameter("@HUR_TYPE", SqlDbType.TinyInt,1) { Value = SqlHelper.SqlParamterNullValue(model.HUR_TYPE) },new SqlParameter("@HUR_IP", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.HUR_IP) },new SqlParameter("@HUR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATIONUID) },new SqlParameter("@HUR_CREATION_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATION_DT) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Modify(HUser model)
        {
            string sql = "update HUser set HUR_USR_ID=@HUR_USR_ID,HUR_DT=@HUR_DT,HUR_TYPE=@HUR_TYPE,HUR_IP=@HUR_IP,HUR_CREATIONUID=@HUR_CREATIONUID,HUR_CREATION_DT=@HUR_CREATION_DT where  HUR_ID=@HUR_ID";
            SqlParameter[] param = { new SqlParameter("@HUR_ID", SqlDbType.BigInt,8) { Value = model.HUR_ID },new SqlParameter("@HUR_USR_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.HUR_USR_ID) },new SqlParameter("@HUR_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_DT) },new SqlParameter("@HUR_TYPE", SqlDbType.TinyInt,1) { Value = SqlHelper.SqlParamterNullValue(model.HUR_TYPE) },new SqlParameter("@HUR_IP", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.HUR_IP) },new SqlParameter("@HUR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATIONUID) },new SqlParameter("@HUR_CREATION_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATION_DT) } };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Modify(HUser model, SqlTransaction trans)
        {
			string sql = "update HUser set HUR_USR_ID=@HUR_USR_ID,HUR_DT=@HUR_DT,HUR_TYPE=@HUR_TYPE,HUR_IP=@HUR_IP,HUR_CREATIONUID=@HUR_CREATIONUID,HUR_CREATION_DT=@HUR_CREATION_DT where  HUR_ID=@HUR_ID";
            SqlParameter[] param = { new SqlParameter("@HUR_ID", SqlDbType.BigInt,8) { Value = model.HUR_ID },new SqlParameter("@HUR_USR_ID", SqlDbType.Int,4) { Value = SqlHelper.SqlParamterNullValue(model.HUR_USR_ID) },new SqlParameter("@HUR_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_DT) },new SqlParameter("@HUR_TYPE", SqlDbType.TinyInt,1) { Value = SqlHelper.SqlParamterNullValue(model.HUR_TYPE) },new SqlParameter("@HUR_IP", SqlDbType.VarChar,20) { Value = SqlHelper.SqlParamterNullValue(model.HUR_IP) },new SqlParameter("@HUR_CREATIONUID", SqlDbType.VarChar,50) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATIONUID) },new SqlParameter("@HUR_CREATION_DT", SqlDbType.DateTime,8) { Value = SqlHelper.SqlParamterNullValue(model.HUR_CREATION_DT) } };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Delete(string sqlcondi, params SqlParameter[] param)
        {
            string sql =  "delete HUser "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

        public int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param)
        {
            string sql =  "delete HUser "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }

        public int Delete(int id)
        {
            string sql = "delete HUser  where HUR_ID=@HUR_ID";
            SqlParameter[] param = { new SqlParameter("@HUR_ID",id) };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

		public int Delete(int id, SqlTransaction trans)
        {
            string sql = "delete HUser  where HUR_ID=@HUR_ID";
            SqlParameter[] param = { new SqlParameter("@HUR_ID",id) };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public HUser Get(int id)
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser WITH(NOLOCK) where HUR_ID=@HUR_ID";
            SqlParameter[] param = { new SqlParameter("@HUR_ID",id) };
            HUser model = new HUser();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.HUR_ID = DbLib.IsLong(reader,i++);
                  	model.HUR_USR_ID = DbLib.IsIntNull(reader,i++);
                  	model.HUR_DT = DbLib.IsDateTimeNull(reader,i++);
                  	model.HUR_TYPE = DbLib.IsByteNull(reader,i++);
                  	model.HUR_IP = DbLib.IsString(reader,i++);
                  	model.HUR_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.HUR_CREATION_DT = DbLib.IsDateTimeNull(reader,i++);
                }
            }
            return model;
        }
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public HUser GetRw(int id)
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser where HUR_ID=@HUR_ID";
            SqlParameter[] param = { new SqlParameter("@HUR_ID",id) };
            HUser model = new HUser();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	model.HUR_ID = DbLib.IsLong(reader,i++);
                  	model.HUR_USR_ID = DbLib.IsIntNull(reader,i++);
                  	model.HUR_DT = DbLib.IsDateTimeNull(reader,i++);
                  	model.HUR_TYPE = DbLib.IsByteNull(reader,i++);
                  	model.HUR_IP = DbLib.IsString(reader,i++);
                  	model.HUR_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.HUR_CREATION_DT = DbLib.IsDateTimeNull(reader,i++);
                }
            }
            return model;
        }

	  
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public List<HUser> GetAll()
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser WITH(NOLOCK)";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public List<HUser> GetAllRw()
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<HUser> GetAll(string Condi, params SqlParameter[] param)
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser WITH(NOLOCK) "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
        /// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<HUser> GetAllRw(string Condi, params SqlParameter[] param)
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		 /// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<HUser> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from HUser WITH(NOLOCK) "+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from HUser WITH(NOLOCK) " + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RoViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<HUser> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from HUser"+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from HUser" + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
       public List<HUser> GetAll(SqlTransaction trans)
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		public List<HUser> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param)
        {
            string sql = "select HUR_ID,HUR_USR_ID,HUR_DT,HUR_TYPE,HUR_IP,HUR_CREATIONUID,HUR_CREATION_DT from HUser "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// sqlDataReader转成该类的集合
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
		public static List<HUser> SqlDataReaderToListObject(SqlDataReader reader)
		{
            List<HUser> listresult = new List<HUser>();
			while (reader.Read())
            {
				int i = 0;
				HUser model = new HUser();
				model.HUR_ID = DbLib.IsLong(reader,i++);
                  	model.HUR_USR_ID = DbLib.IsIntNull(reader,i++);
                  	model.HUR_DT = DbLib.IsDateTimeNull(reader,i++);
                  	model.HUR_TYPE = DbLib.IsByteNull(reader,i++);
                  	model.HUR_IP = DbLib.IsString(reader,i++);
                  	model.HUR_CREATIONUID = DbLib.IsString(reader,i++);
                  	model.HUR_CREATION_DT = DbLib.IsDateTimeNull(reader,i++);
				listresult.Add(model);
            }
            return listresult;
		}
    }
}

