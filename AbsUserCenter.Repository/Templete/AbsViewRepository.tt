<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="../TemplateDbhelper.ttinclude"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using AbsUserCenter.Core.Model;
using AbsUserCenter.Core.IRepository;
using AbsUserCenter.Repository.DBUtility;
<#        
   foreach(DbTable table in DbHelper.GetDbTableViews(MyConfig.ConStr,MyConfig.DbBaseStr,MyConfig.DbTableStr)){
        
		string InsertStr,AllColumnStr, ModifyStr, AllAttrParam,ModifyAttrParam,PrimaryKeyParam,InsertReturnId;
		CommonSql(table,out InsertStr,out AllColumnStr,out ModifyStr,out AllAttrParam,out ModifyAttrParam,out PrimaryKeyParam,out InsertReturnId);
#>
namespace AbsUserCenter.Repository
{   
	public partial class <#=table.TableName#>Repository:I<#=table.TableName#>Repository
    {
		public int AddReturnId(<#=table.TableName#> model)
        {
			<#
			WriteLine(InsertReturnId);
			#>
            SqlParameter[] param = { <#=AllAttrParam#> };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sql, param));
		}

		public int AddReturnId(<#=table.TableName#> model, SqlTransaction trans)
        {
			<#
			WriteLine(InsertReturnId);
			#>
            SqlParameter[] param = { <#=AllAttrParam#> };
            return Convert.ToInt32(SqlHelper.ExecuteScalar(trans, CommandType.Text, sql, param));
		}

        public int Add(<#=table.TableName#> model)
        {
			<#
			WriteLine(InsertStr);
			#>
            SqlParameter[] param = { <#=AllAttrParam#> };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Add(<#=table.TableName#> model, SqlTransaction trans)
        {
			<#
			WriteLine(InsertStr);
			#>
            SqlParameter[] param = { <#=AllAttrParam#> };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Modify(<#=table.TableName#> model)
        {
            string sql = "<#=ModifyStr#> where  <#=GetCondiByPK(table)#>";
            SqlParameter[] param = { <#=ModifyAttrParam#> };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
		}

		public int Modify(<#=table.TableName#> model, SqlTransaction trans)
        {
			string sql = "<#=ModifyStr#> where  <#=GetCondiByPK(table)#>";
            SqlParameter[] param = { <#=ModifyAttrParam#> };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
		}

		public int Delete(string sqlcondi, params SqlParameter[] param)
        {
            string sql =  "delete <#=table.TableName#> "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

        public int Delete(string sqlcondi,  SqlTransaction trans, params SqlParameter[] param)
        {
            string sql =  "delete <#=table.TableName#> "+sqlcondi;;
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }

        public int Delete(int id)
        {
            string sql = "delete <#=table.TableName#>  where <#=GetCondiByPK(table,"id")#>";
            SqlParameter[] param = { <#=GetParamByPK(table,"id")#> };
            return SqlHelper.ExecuteNonQuery(SqlHelper.RwViewConnString, CommandType.Text, sql, param);
        }

		public int Delete(int id, SqlTransaction trans)
        {
            string sql = "delete <#=table.TableName#>  where <#=GetCondiByPK(table,"id")#>";
            SqlParameter[] param = { <#=GetParamByPK(table,"id")#> };
            return SqlHelper.ExecuteNonQuery(trans, CommandType.Text, sql, param);
        }
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public <#=table.TableName#> Get(int id)
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#> WITH(NOLOCK) where <#=GetCondiByPK(table,"id")#>";
            SqlParameter[] param = { <#=GetParamByPK(table,"id")#> };
            <#=table.TableName#> model = new <#=table.TableName#>();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	<# ReadToModel(table);#>
                }
            }
            return model;
        }
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public <#=table.TableName#> GetRw(int id)
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#> where <#=GetCondiByPK(table,"id")#>";
            SqlParameter[] param = { <#=GetParamByPK(table,"id")#> };
            <#=table.TableName#> model = new <#=table.TableName#>();
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql, param))
            {
                while (reader.Read())
                {
					int i = 0;
                  	<# ReadToModel(table);#>
                }
            }
            return model;
        }

	  
		/// <summary>
		/// 只读库读取数据
		/// </summary>
        public List<<#=table.TableName#>> GetAll()
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#> WITH(NOLOCK)";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		
		/// <summary>
		/// 读写库读取数据
		/// </summary>
        public List<<#=table.TableName#>> GetAllRw()
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#>";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 只读库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<<#=table.TableName#>> GetAll(string Condi, params SqlParameter[] param)
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#> WITH(NOLOCK) "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
        /// <summary>
        /// 读写库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<<#=table.TableName#>> GetAllRw(string Condi, params SqlParameter[] param)
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#> "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		 /// <summary>
        /// 只读库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<<#=table.TableName#>> GetAll(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select <#=AllColumnStr#>,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from <#=table.TableName#> WITH(NOLOCK) "+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from <#=table.TableName#> WITH(NOLOCK) " + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RoViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RoViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
        /// 读写库读取数据 分页
        /// </summary>
        /// <param name="Condi">条件</param>
        /// <param name="order">排序字段</param>
        /// <param name="start">开始条数</param>
        /// <param name="limit">读取条数</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
        public List<<#=table.TableName#>> GetAllRw(string Condi, string order, long start, long limit, out long count, params SqlParameter[] param)
        {
            string sqlData = "select * from(select <#=AllColumnStr#>,ROW_NUMBER()over(order by "+order+") ROW_NUMBERId from <#=table.TableName#>"+Condi+") resultTemp where ROW_NUMBERId between "+start+" and "+ (start+limit) ;
            string sqlCount = "select COUNT(1) from <#=table.TableName#>" + Condi;
            count = long.Parse(SqlHelper.ExecuteScalar(SqlHelper.RwViewConnString, CommandType.Text, sqlCount, param).ToString());
            using (SqlDataReader reader = SqlHelper.ExecuteReader(SqlHelper.RwViewConnString, CommandType.Text, sqlData, param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }
		/// <summary>
		/// 带事物库读取数据
		/// </summary>
       public List<<#=table.TableName#>> GetAll(SqlTransaction trans)
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#>";
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// 带事物库读取数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="Condi">条件</param>
        /// <param name="param">参数</param>
        /// <returns></returns>
		public List<<#=table.TableName#>> GetAll(SqlTransaction trans,string Condi, params SqlParameter[] param)
        {
            string sql = "select <#=AllColumnStr#> from <#=table.TableName#> "+Condi;
            using (SqlDataReader reader = SqlHelper.ExecuteReader(trans, CommandType.Text, sql,param))
            {
				return SqlDataReaderToListObject(reader);
            }
        }

		/// <summary>
        /// sqlDataReader转成该类的集合
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
		public static List<<#=table.TableName#>> SqlDataReaderToListObject(SqlDataReader reader)
		{
            List<<#=table.TableName#>> listresult = new List<<#=table.TableName#>>();
			while (reader.Read())
            {
				int i = 0;
				<#=table.TableName#> model = new <#=table.TableName#>();
				<# ReadToModel(table);#>
				listresult.Add(model);
            }
            return listresult;
		}
    }
}
<#
      
    }            
#>
<#  #>

<#+
	/// <summary>
	/// 读取结果映射封装
	/// </summary>
	public void ReadToModel(DbTable table){
		 PushIndent("                  	");
		 foreach (DbColumn column in DbHelper.GetDbColumns(MyConfig.ConStr,MyConfig.DbBaseStr, table.TableName))
         {
			  WriteLine("model."+column.ColumnName+" = DbLib."+column.CSharpConvert+"(reader,i++);");
         }
         PopIndent();
	}
	
	/// <summary>
	/// 根据主键进行操作的条件语句
	///@table table
	///@id 函数id名，不传自动获取所有id为条件
	/// </summary>
	 public string GetCondiByPK(DbTable table,string id=null){
		 string sqlcondi="";
         if (table.HasPrimaryKey)  //有主键
         {
			 if (id==null)
             {
				 for (int i = 0; i < table.PrimaryKey.Length; i++)
				 {
					string columnName=table.PrimaryKey[i];
					sqlcondi+=columnName+"=@"+columnName;
					 if(i!=table.PrimaryKey.Length-1){
						 sqlcondi+=" and ";
					 }
				 }
             }else{
				 string columnName=table.PrimaryKey[0];
				 sqlcondi+=columnName+"=@"+columnName;
             }
         }
		 return sqlcondi;
     }
	 
		/// <summary>
		/// 根据主键进行操作的参数
		///@table table
		///@id 函数id名，不传自动获取所有id为条件
		/// </summary>
	 	 public string GetParamByPK(DbTable table,string id=null){
		 string param="";
         if (table.HasPrimaryKey)  //有主键
         {
             if (id==null)
             {
				 for (int i = 0; i < table.PrimaryKey.Length; i++)
				{
					string columnName=table.PrimaryKey[i];
					param+="new SqlParameter(\"@"+columnName+"\", model."+columnName+")";
					if(i!=table.PrimaryKey.Length-1){
						param+=",";
					}
				}
             }else{  //只根据id删除
				 string columnName=table.PrimaryKey[0];
				param+="new SqlParameter(\"@"+columnName+"\","+id+")";
			 }
         }
		 return param;
     }

	 public void CommonSql(DbTable table,out string InsertStr,out string AllColumnStr,out string ModifyStr,out string AllAttrParam,out string ModifyAttrParam,out string PrimaryKeyParam,out string InsertReturnId){
	 string InsertColumunStr="";
		 AllColumnStr="";
		 string InsertValueStr="";
		 ModifyStr="update "+table.TableName+" set ";
		 AllAttrParam="";
		 PrimaryKeyParam="";
		 ModifyAttrParam="";
         foreach (DbColumn column in DbHelper.GetDbColumns(MyConfig.ConStr,MyConfig.DbBaseStr, table.TableName))
         {
			 AllColumnStr+=column.ColumnName+",";
			 //ModifyAttrParam+="new SqlParameter(\"@"+column.ColumnName+"\", model."+column.ColumnName+"),";ColumnType
			 ModifyAttrParam+="new SqlParameter(\"@"+column.ColumnName+"\", SqlDbType."+column.SqlDbType_ColumnType+","+column.CharLength+") { Value = "+(column.IsNullable?"SqlHelper.SqlParamterNullValue(model."+column.ColumnName+")":"model."+column.ColumnName+"")+" },";
             if (!column.IsIdentity)
             {
				InsertColumunStr+=column.ColumnName+",";
				InsertValueStr+="@"+column.ColumnName+",";
				AllAttrParam+="new SqlParameter(\"@"+column.ColumnName+"\", SqlDbType."+column.SqlDbType_ColumnType+","+column.CharLength+") { Value = "+(column.IsNullable?"SqlHelper.SqlParamterNullValue(model."+column.ColumnName+")":"model."+column.ColumnName+"")+" },";
             }
			 if(column.IsPrimaryKey){
				 PrimaryKeyParam+="new SqlParameter(\"@"+column.ColumnName+"\", SqlDbType."+column.SqlDbType_ColumnType+","+column.CharLength+") { Value = "+(column.IsNullable?"SqlHelper.SqlParamterNullValue(model."+column.ColumnName+")":"model."+column.ColumnName+"")+" },";
             }else{
				ModifyStr+=column.ColumnName+"=@"+column.ColumnName+",";
             }
         }
		 InsertColumunStr=InsertColumunStr.Substring(0,InsertColumunStr.Length-1);
		 AllColumnStr=AllColumnStr.Substring(0,AllColumnStr.Length-1);
		 ModifyAttrParam=ModifyAttrParam.Substring(0,ModifyAttrParam.Length-1);
		 InsertValueStr=InsertValueStr.Substring(0,InsertValueStr.Length-1);
		 ModifyStr=ModifyStr.Substring(0,ModifyStr.Length-1);
		 if(PrimaryKeyParam!="")
			PrimaryKeyParam=PrimaryKeyParam.Substring(0,PrimaryKeyParam.Length-1);
		 AllAttrParam=AllAttrParam.Substring(0,AllAttrParam.Length-1);
		 InsertStr="string sql=\"insert into "+table.TableName+"("+InsertColumunStr+") values("+InsertValueStr+")\";";
		 InsertReturnId="string sql=\"insert into "+table.TableName+"("+InsertColumunStr+") values("+InsertValueStr+");select @@IDENTITY AS ID\";";
	 }
#>
<#+
    public class MyConfig
    {
        public static readonly string ConStr=config.ViewConnectionString;
        public static readonly string DbBaseStr=config.ViewDbDatabase;
		public static readonly string DbTableStr=config.ViewDbTables;
    }
#>